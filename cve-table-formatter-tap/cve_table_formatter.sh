#! /bin/bash -x

# takes in an HTML table of CVEs (without indentations) and outputs a table that
# meets the TAP release notes standard (orders components in alphabetical order,
# creates expandable sections for the CVE lists, and creates links for each CVE).

# Read the HTML table code from input file
table_code=$(cat cve_table_input.txt)

# Takes in a row of CVEs and prints to output file the links for the CVEs as
# list items on separate lines within an expandable section
function process_row {
  # extract list items, put each item on a new line, and order alpahbetically
  list_items=$(echo "$1" | sed 's/<td><ul>//g;s/<\/ul><\/td>//g')
  list_items=$(echo "$list_items" | sed 's/<\/li><li>/<\/li>\n<li>/g')
  list_items=$(echo "$list_items" | sort -r)

  # turn list items into links
  link_text=$(echo "$list_items" | sed 's/<li>//g;s/<\/li>//g')
  link_text_array=($link_text)
  link_list=""
  for item in "${link_text_array[@]}"
  do
    if [[ $item =~ ^CVE.* ]]; then
      link_list+="<li><a href=\"https://nvd.nist.gov/vuln/detail/$item\">$item</a></li>\n"

    elif [[ $item =~ ^GHSA.* ]]; then
      link_list+="<li><a href=\"https://github.com/advisories/$item\">$item</a></li>\n"

    elif [[ $item =~ ^ALAS.* ]]; then
      link_list+="<li><a href=\"https://alas.aws.amazon.com/AL2/$item.html\">$item</a></li>\n"

    else
      link_list+="Vuln code error: $item\n"
    fi
  done

  # print CVE expandable list
  echo "<td><details><summary>Expand to see the list</summary><ul>" >> cve_table_output.txt
  printf "$link_list" >> cve_table_output.txt
  echo "</ul></details></td>" >> cve_table_output.txt
}

# Extract the table header code and print to output file
table_header=$(echo "$table_code" | sed -n '/<thead>/,/<\/thead>/p')
eval "touch cve_table_output.txt"
echo "<table>" > cve_table_output.txt
echo "$table_header" >> cve_table_output.txt

# Extract the table body code and strip out spaces
table_body=$(echo "$table_code" | sed -n '/<tbody>/,/<\/tbody>/p')
echo $table_body
# table_body=$(echo "$table_body" | sed 's/ //g')
#
# # Create array of table rows - ordered alphabetically
# table_rows=$(echo "$table_body" | sed 's/<tbody>//;s/<\/tbody>//')
# table_rows=$(echo "$table_rows" | tr -d \\n)
# table_rows=$(echo "$table_rows" | sed 's/<\/tr><tr>/<\/tr>\n<tr>/g')
# table_rows=$(echo "$table_rows" | sed '/^\s*$/d')
# table_rows=$(echo "$table_rows" | sort)
# table_row_array=($table_rows)
#
# # Print table body and the processed contents for the table body to output file
# echo "<tbody>" >> cve_table_output.txt
# for row in "${table_row_array[@]}"
# do
#   # strip <tr> tags from input and print opening tag to output file
#   full_row=$(echo "$row" | sed 's/<tr>//;s/<\/tr>//')
#   echo "<tr>" >> cve_table_output.txt
#
#   # separate the component and cve table cells and get the component name
#   split_row=$(echo "$full_row" | sed 's/<\/td><td>/<\/td>\n<td>/g')
#   split_row_array=($split_row)
#   component_cell=${split_row_array[0]}
#   cve_cell=${split_row_array[1]}
#   component_name=$(echo "$component_cell" | sed 's/<td>//;s/<\/td>//')
#
#   # print component table cell to output file
#   echo $component_cell >> cve_table_output.txt
#
#   # process the list items in the CVE table cell and print closing table row tag
#   process_row "$cve_cell"
#   echo "</tr>" >> cve_table_output.txt
#   echo "Row complete:" $component_name
# done
#
# # Print closing tags for table to output file
# echo "</tbody>" >> cve_table_output.txt
# echo "</table>" >> cve_table_output.txt
